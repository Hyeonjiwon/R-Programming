# 데이터프레임 : 행과 열을 가진 2차원 저장구조
# 각 열이 서로 다른 데이터 타입을 가질 수 있음
no <- c(10, 20, 30, 40, 50, 60, 70)
age <- c(18, 15,13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", "M", "F", "M")
# 데이터 프레임 생성 예
students <- data.frame(no, age, gender)
students
# 열의 잉름과 행의 이름 확인
# colnames() : 열 이름 / rownameS() : 행 이름
colnames(students)
rownames(students)
# 데이터 구조2
# 데이터프레임(DataFrame)
# 데이터프레임 : 행과 열을 가진 2차원 저장구조
# 각 열이 서로 다른 데이터 타입을 가질 수 있음
no <- c(10, 20, 30, 40, 50, 60, 70)
age <- c(18, 15,13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", "M", "F", "M")
# 데이터 프레임 생성 예
students <- data.frame(no, age, gender)
students
# 열의 잉름과 행의 이름 확인
# colnames() : 열 이름 / rownameS() : 행 이름
colnames(students)
rownames(students)
# 열의 이름과 행의 이름 수정
colnames(students<-c("no", "나이", "성별"))
# 열의 이름과 행의 이름 수정
colnames(students) <- c("no", "나이", "성별")
# 데이터 구조2
# 데이터프레임(DataFrame)
# 데이터프레임 : 행과 열을 가진 2차원 저장구조
# 각 열이 서로 다른 데이터 타입을 가질 수 있음
no <- c(10, 20, 30, 40, 50, 60, 70)
age <- c(18, 15,13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", "M", "F", "M")
# 데이터 프레임 생성 예
students <- data.frame(no, age, gender)
students
# 열의 잉름과 행의 이름 확인
# colnames() : 열 이름 / rownameS() : 행 이름
colnames(students)
rownames(students)
# 열의 이름과 행의 이름 수정
colnames(students) <- c("no", "나이", "성별")
rownames(students)<-c("A", "B", "C", "D", "E", "F", "G")
students
# 일부 데이터만 접근
# 데이터프레임의 변수이름 $열이름 : 특정 열에 접근하기
students$no
students$age
colnames(students) <- c("no", "age", "gender")
students$age
# 대괄호 안에 열이름으로 특정 열에 접근
# [ , "열 이름"]
students[, "no"]
students[, "age"]
# 열 인덱스로 특정 열에 접근
students[, 1] # 1열 모두 출력
students[, 2] # 2열 모두 출력
students["A", ] # A행 데이터 출력
# 2. 행 인덱스로 특정 행 접근
students[2, ]
# 한 데이터
# 1. 변수이름[행 인덱스, 열 인덱스]
students[3, 1]
# 2. 변수이름[행 이름, 열 이름]
students["A", "no"]
# 행/열 데이터 추가
# 기존에 존재하지 않는 행/열 이름 | 행/열 인덱스로 벡터를 저장
# 기존에 존재하는 열 이름 -> 데이터 갱신
students$name <- c("이용", "준희", "이훈", "서희", "승희", "하정", "하준")
students["H", ] <- c(80, 10, 'M', 홍길동)
홍길동
students
# 행/열 데이터 추가
# 기존에 존재하지 않는 행/열 이름 | 행/열 인덱스로 벡터를 저장
# 기존에 존재하는 열 이름 -> 데이터 갱신
students$name <- c("이용", "준희", "이훈", "서희", "승희", "하정", "하준", "홍길동")
# 행/열 데이터 추가
# 기존에 존재하지 않는 행/열 이름 | 행/열 인덱스로 벡터를 저장
# 기존에 존재하는 열 이름 -> 데이터 갱신
students$name <- c("이용", "준희", "이훈", "서희", "승희", "하정", "하준", "홍길동")
students
students["H", ] <- c(80, 10, 'M', "홍길동")
students
# 데이터 구조2
# 데이터프레임(DataFrame)
# 데이터프레임 : 행과 열을 가진 2차원 저장구조
# 각 열이 서로 다른 데이터 타입을 가질 수 있음
no <- c(10, 20, 30, 40, 50, 60, 70)
age <- c(18, 15,13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", "M", "F", "M")
# 데이터 프레임 생성 예
students <- data.frame(no, age, gender)
students
# 열의 잉름과 행의 이름 확인
# colnames() : 열 이름 / rownameS() : 행 이름
colnames(students)
rownames(students)
# 열의 이름과 행의 이름 수정
colnames(students) <- c("no", "나이", "성별")
rownames(students)<-c("A", "B", "C", "D", "E", "F", "G")
students
# 다시 돌려놓기
colnames(students) <- c("no", "age", "gender")
students
# 일부 데이터만 접근
# 열
# 1. 데이터프레임 이름 $열이름
students$no
students$age
# 2. [ , "열 이름"]
students[, "no"]
students[, "age"]
# 3. 열 인덱스로 특정 열에 접근
students[, 1] # 1열 모두 출력
students[, 2] # 2열 모두 출력
# 행
# 1. 행 이름으로 특정 행 접근
students["A", ] # A행 데이터 출력
# 2. 행 인덱스로 특정 행 접근
students[2, ] # 2행 데이터 출력
# 한 데이터
# 1. 변수이름[행 인덱스, 열 인덱스]
students[3, 1]
# 2. 변수이름[행 이름, 열 이름]
students["A", "no"]
# 행/열 데이터 추가
# 기존에 존재하지 않는 행/열 이름 | 행/열 인덱스로 벡터를 저장
# 기존에 존재하는 열 이름 -> 데이터 갱신
students$name <- c("이용", "준희", "이훈", "서희", "승희", "하정", "하준", "홍길동")
students
students["H", ] <- c(80, 10, 'M', "홍길동")
students
# 데이터 구조2
# 데이터프레임(DataFrame)
# 데이터프레임 : 행과 열을 가진 2차원 저장구조
# 각 열이 서로 다른 데이터 타입을 가질 수 있음
no <- c(10, 20, 30, 40, 50, 60, 70)
age <- c(18, 15,13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", "M", "F", "M")
# 데이터 프레임 생성 예
students <- data.frame(no, age, gender)
students
# 열의 잉름과 행의 이름 확인
# colnames() : 열 이름 / rownameS() : 행 이름
colnames(students)
rownames(students)
# 열의 이름과 행의 이름 수정
colnames(students) <- c("no", "나이", "성별")
rownames(students)<-c("A", "B", "C", "D", "E", "F", "G")
students
# 다시 돌려놓기
colnames(students) <- c("no", "age", "gender")
students
# 일부 데이터만 접근
# 열
# 1. 데이터프레임 이름 $열이름
students$no
students$age
# 2. [ , "열 이름"]
students[, "no"]
students[, "age"]
# 3. 열 인덱스로 특정 열에 접근
students[, 1] # 1열 모두 출력
students[, 2] # 2열 모두 출력
# 행
# 1. 행 이름으로 특정 행 접근
students["A", ] # A행 데이터 출력
# 2. 행 인덱스로 특정 행 접근
students[2, ] # 2행 데이터 출력
# 한 데이터
# 1. 변수이름[행 인덱스, 열 인덱스]
students[3, 1]
# 2. 변수이름[행 이름, 열 이름]
students["A", "no"]
# 행/열 데이터 추가
# 기존에 존재하지 않는 행/열 이름 | 행/열 인덱스로 벡터를 저장
# 기존에 존재하는 열 이름 -> 데이터 갱신
students$name <- c("이용", "준희", "이훈", "서희", "승희", "하정", "하준")
students
students["H", ] <- c(80, 10, 'M', "홍길동")
students
# 3.4 배열(array)
# 배열 : 다차원 데이터 저장 구조, 하나의 원시 데이터 타입으로 저장
# 하나의 원시 데이터 타입으로 저장
var1 <- c(1,2,3,4,5,6,7,8,9,10,11,12 ) # 벡터 생성하기
arr1 <- array(var1, dim=c(2, 2, 3, 1))
arr1
arr1 <- array(var1, dim=c(2, 2, 3)) # 2행 2열 3차원
arr1
arr1 <- array(var1, dim=c(2, 2, 3, 1)) # 2행 2열 4차원
arr1
v_data <- c("02-111-2222", "01022223333") 		      # 벡터
m_data <- matrix(c(21:26), nrow = 2) 			          # 행렬
a_data <- array(c(31:36), dim = c(2, 2, 2)) 		    # 배열
d_data <- data.frame(address = c("seoul", "busan"),
name = c("Lee", "Kim"), stringsAsFactors = F)
d_data
list_data
# list(키1 = 값, 키2 = 값, …. )와 같이 키와 값 쌍으로 리스트 생성
list_data <- list(	"홍길동", 	# name 키에 “홍길동” 값 저장
tel = v_data, 	# tel 키에 v_data를 값으로 저장
score1 = m_data, 	# score1 키에 m_data를 값으로 저장
score2 = a_data, 	# score2 키에 a_data를 값으로 저장
friends = d_data) 	# friends 키에 d_data를 값으로 저장
list_data
# 리스트이름$키
list_data$name
# 리스트이름$키
list_data$name
list_data$tel
# 리스트이름[인덱스]
list_data[1]
# 데이터 구조2
# 3.1 데이터프레임(DataFrame)
# 데이터프레임 : 행과 열을 가진 2차원 저장구조
# 각 열이 서로 다른 데이터 타입을 가질 수 있음
no <- c(10, 20, 30, 40, 50, 60, 70)
age <- c(18, 15,13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", "M", "F", "M")
# 데이터 프레임 생성 예
students <- data.frame(no, age, gender)
students
# 열의 잉름과 행의 이름 확인
# colnames() : 열 이름 / rownameS() : 행 이름
colnames(students)
rownames(students)
# 열의 이름과 행의 이름 수정
colnames(students) <- c("no", "나이", "성별")
rownames(students)<-c("A", "B", "C", "D", "E", "F", "G")
students
# 다시 돌려놓기
colnames(students) <- c("no", "age", "gender")
students
# 일부 데이터만 접근
# 열
# 1. 데이터프레임 이름 $열이름
students$no
students$age
# 2. [ , "열 이름"]
students[, "no"]
students[, "age"]
# 3. 열 인덱스로 특정 열에 접근
students[, 1] # 1열 모두 출력
students[, 2] # 2열 모두 출력
# 행
# 1. 행 이름으로 특정 행 접근
students["A", ] # A행 데이터 출력
# 2. 행 인덱스로 특정 행 접근
students[2, ] # 2행 데이터 출력
# 한 데이터
# 1. 변수이름[행 인덱스, 열 인덱스]
students[3, 1]
# 2. 변수이름[행 이름, 열 이름]
students["A", "no"]
# 행/열 데이터 추가
# 기존에 존재하지 않는 행/열 이름 | 행/열 인덱스로 벡터를 저장
# 기존에 존재하는 열 이름 -> 데이터 갱신
students$name <- c("이용", "준희", "이훈", "서희", "승희", "하정", "하준")
students
students["H", ] <- c(80, 10, 'M', "홍길동")
# 3.4 배열(array)
# 배열 : 다차원 데이터 저장 구조, 하나의 원시 데이터 타입으로 저장
# 하나의 원시 데이터 타입으로 저장
var1 <- c(1,2,3,4,5,6,7,8,9,10,11,12 ) # 벡터 생성하기
arr1 <- array(var1, dim=c(2, 2, 3, 1)) # 2행 2열 4차원
arr1
# 3.5 리스트(List)
# 리스트 : 키-값으로 저장 가능, 값 : 어떤 데이터 구조의 데이터도 저장가능
v_data <- c("02-111-2222", "01022223333") 		      # 벡터
m_data <- matrix(c(21:26), nrow = 2) 			          # 행렬
a_data <- array(c(31:36), dim = c(2, 2, 2)) 		    # 배열
d_data <- data.frame(address = c("seoul", "busan"),
name = c("Lee", "Kim"), stringsAsFactors = F) # 데이터 프레임
# list(키1 = 값, 키2 = 값, …. )와 같이 키와 값 쌍으로 리스트 생성
list_data <- list( name = "홍길동", 	# name 키에 “홍길동” 값 저장
tel = v_data, 	# tel 키에 v_data를 값으로 저장
score1 = m_data, 	# score1 키에 m_data를 값으로 저장
score2 = a_data, 	# score2 키에 a_data를 값으로 저장
friends = d_data) 	# friends 키에 d_data를 값으로 저장
list_data
# 리스트이름$키
list_data$name
list_data$tel
# 리스트이름[인덱스]
list_data[1]
# 데이터 구조2
# 3.1 데이터프레임(DataFrame)
# 데이터프레임 : 행과 열을 가진 2차원 저장구조
# 각 열이 서로 다른 데이터 타입을 가질 수 있음
no <- c(10, 20, 30, 40, 50, 60, 70)
age <- c(18, 15,13, 12, 10, 9, 7)
gender <- c("M", "M", "M", "M", "M", "F", "M")
# 데이터 프레임 생성 예
students <- data.frame(no, age, gender)
students
# 열의 잉름과 행의 이름 확인
# colnames() : 열 이름 / rownameS() : 행 이름
colnames(students)
rownames(students)
# 열의 이름과 행의 이름 수정
colnames(students) <- c("no", "나이", "성별")
rownames(students)<-c("A", "B", "C", "D", "E", "F", "G")
students
# 다시 돌려놓기
colnames(students) <- c("no", "age", "gender")
students
# 일부 데이터만 접근
# 열
# 1. 데이터프레임 이름 $열이름
students$no
students$age
# 2. [ , "열 이름"]
students[, "no"]
students[, "age"]
# 3. 열 인덱스로 특정 열에 접근
students[, 1] # 1열 모두 출력
students[, 2] # 2열 모두 출력
# 행
# 1. 행 이름으로 특정 행 접근
students["A", ] # A행 데이터 출력
# 2. 행 인덱스로 특정 행 접근
students[2, ] # 2행 데이터 출력
# 한 데이터
# 1. 변수이름[행 인덱스, 열 인덱스]
students[3, 1]
# 2. 변수이름[행 이름, 열 이름]
students["A", "no"]
# 행/열 데이터 추가
# 기존에 존재하지 않는 행/열 이름 | 행/열 인덱스로 벡터를 저장
# 기존에 존재하는 열 이름 -> 데이터 갱신
students$name <- c("이용", "준희", "이훈", "서희", "승희", "하정", "하준")
students
students["H", ] <- c(80, 10, 'M', "홍길동")
# 3.4 배열(array)
# 배열 : 다차원 데이터 저장 구조, 하나의 원시 데이터 타입으로 저장
# 하나의 원시 데이터 타입으로 저장
var1 <- c(1,2,3,4,5,6,7,8,9,10,11,12 ) # 벡터 생성하기
arr1 <- array(var1, dim=c(2, 2, 3, 1)) # 2행 2열 4차원
arr1
# 3.5 리스트(List)
# 리스트 : 키-값으로 저장 가능, 값 : 어떤 데이터 구조의 데이터도 저장가능
v_data <- c("02-111-2222", "01022223333") 		      # 벡터
m_data <- matrix(c(21:26), nrow = 2) 			          # 행렬
a_data <- array(c(31:36), dim = c(2, 2, 2)) 		    # 배열
d_data <- data.frame(address = c("seoul", "busan"),
name = c("Lee", "Kim"), stringsAsFactors = F) # 데이터 프레임
# list(키1 = 값, 키2 = 값, …. )와 같이 키와 값 쌍으로 리스트 생성
list_data <- list( "홍길동", 	# name 키에 “홍길동” 값 저장
tel = v_data, 	# tel 키에 v_data를 값으로 저장
score1 = m_data, 	# score1 키에 m_data를 값으로 저장
score2 = a_data, 	# score2 키에 a_data를 값으로 저장
friends = d_data) 	# friends 키에 d_data를 값으로 저장
list_data
# 리스트이름$키
list_data$name
list_data$tel
# 리스트이름[인덱스]
list_data[1]
# 4.1 연산
10 <= 10
10 > 5
10 >= 5
n % in % (c(10, 20, 30))
n % in % (c(10, 20, 30))
n %in% (c(10, 20, 30))
# 4. R 기초 프로그래밍 1
# 4.1 연산
10 <= 10
10 > 5
10 >= 5
n <- 20
n %in% (c(10, 20, 30))
n % in % (c(10, 20, 30))
n %in% (c(10, 20, 30))
n <- 20
# & 연산자
n <- 10
n >= 0 & n <= 100
# 벡터 연산
# 벡터와 스칼라의 연산 : 벡터 안의 모든 데이터에 각각 연산이 적용
score <- c(10, 20)
score + 2   # score 벡터의 모든 데이터에 각각 2를 더하여 반환
score       # score 벡터 자체는 변경 x]
# 연산 결과를 score 변수에 반영하려면 score에 연산 결과 저장
score <- score + 2 # score 벡터의 모든 데이터에 각각2를 더하고,
# 연산 결과를 score 변수에 반영하려면 score에 연산 결과 저장
score <- score + 2
# 연산 결과를 score에 저장
score               	# score 가 변경된 것을 확인할 수 있음
## 벡터와 벡터와의 연산
score1 <- c(100,200)
score2 <- c(90,91)
# 벡터와 벡터의 더하기 연산
sum_score <- score1 + score2
sum_score   # 100+90  200+91
diff <- score1 - score2
diff
score1 <- c(100,200,300,400)
score2 <- c(90,91)
sum_score <- score1 + score2
sum_score
score1 <- c(100,200,300,400, 500)
score2 <- c(90,91)
sum_score <- score1 + score2
# 4. R 기초 프로그래밍 1
# 4.1 연산
# 논리 연산자
10 <= 10
10 > 5
10 >= 5
# in 연산자 : %in%
n <- 20
n %in% (c(10, 20, 30)) # 연산자 뒤 나열한 값들 중 하나와 일치하면 참
# and 연산자 : &
n <- 10
n >= 0 & n <= 100
# or 연산자 : |
n <- 1000
n >= 0 | n <=100
# not 연산자 : !
!(10==5)
# 벡터 연산
# 벡터와 스칼라의 연산 : 벡터 안의 모든 데이터에 각각 연산이 적용
score <- c(10, 20)
score + 2   # score 벡터의 모든 데이터에 각각 2를 더하여 반환
score       # score 벡터 자체는 변경 x
# 연산 결과를 score 변수에 반영하려면 score에 연산 결과 저장
score <- score + 2
score       # 연산 결과를 score에 저장
## 벡터와 벡터와의 연산
score1 <- c(100,200)
score2 <- c(90,91)
# 벡터와 벡터의 더하기 연산
sum_score <- score1 + score2
sum_score
diff <- score1 - score2
diff
score1 <- c(100,200,300,400)
score2 <- c(90,91)
sum_score <- score1 + score2
sum_score    # 100+90  200+91  300+90  400+91
score1 <- c(100,200,300,400, 500)
score2 <- c(90,91)
sum_score <- score1 + score2
sum_score
## 행렬과 스칼라와의 연산
m1 <- matrix(c(1,2,3,4,5,6), nrow = 2)
m1
m1 <- m1 * 10
m1
## 행렬과 행렬과의 연산
m1 <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3)
m2 <- matrix(c(2,2,2,2,2,2,2,2,2), nrow = 3)
m1
m2
m1
m2
m1 + m2
# 조건문 : 어떤 문장들을 실행할 지 하지 않을 지를 판단하는 문장
# if 문
score <- 76
if (score  >= 80) {
print("조건이 TRUE인 경우만 수행할 문장")
}
print("조건이 TRUE인 경우만 수행할 문장")
if (score  >= 80) {
print("조건이 TRUE인 경우만 수행할 문장")
}
score <- 86
## if ~ else 문
score <- 86
if(score  >= 91) { 		 # 이 조건의 결과는 FALSE
print("A") 	 # 조건이 TRUE일 때 수행할 문장
} else {
print("B or C or D")  # 조건이 FALSE일 때 수행할 문장
}
score <- 86
if (score >= 91) { print("A")
} else if (score >= 81) { print("B")
} else if (score >= 71) { print("C")
} else if (score >= 61) { print("D")
} else  { print ("F") }
# ifelse() 함수
# ifelse(조건, "조건이 TRUE일 때 수행할 문장", "FALSE일 때 수행할 문장")
score <- 85
ifelse(score>=91,  "A",  "FALSE 일 때 수행")
ifelse(score >= 91, "A",  ifelse(score >= 81, "B", "C or D ") )
# 반복문 : 문장들이 여러 번 수행할 수 있도록 제어
# for 문
for(num in (1:3)) {
print(num)
}
# for 문안에 if 문이나 다른 제어문을 중첩해서 사용 가능
for (num in (1:5)) {
if ( num %% 2 == 0)
print( paste( num, "짝수") )
else
print( paste( num, "홀수") )
}
a <- 10
a
# 함수 정의
a <- function() {
print("test a")
print("test a")
}
# 함수 호출출
a()
